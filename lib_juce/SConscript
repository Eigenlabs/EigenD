
#
# Copyright 2009 Eigenlabs Ltd.  http://www.eigenlabs.com
#
# This file is part of EigenD.
#
# EigenD is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# EigenD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EigenD.  If not, see <http://www.gnu.org/licenses/>.
#

Import('env')

juce_env = env.Clone()

me = env.Dir('.').abspath

if env['IS_WINDOWS']:
    juce_files = Split("""
            modules/juce_audio_basics/juce_audio_basics.cpp
            modules/juce_audio_devices/juce_audio_devices.cpp
            modules/juce_audio_formats/juce_audio_formats.cpp
            modules/juce_audio_processors/juce_audio_processors.cpp
            modules/juce_audio_utils/juce_audio_utils.cpp
            modules/juce_core/juce_core.cpp
            modules/juce_cryptography/juce_cryptography.cpp
            modules/juce_data_structures/juce_data_structures.cpp
            modules/juce_events/juce_events.cpp
            modules/juce_graphics/juce_graphics.cpp
            modules/juce_gui_basics/juce_gui_basics.cpp
            modules/juce_gui_extra/juce_gui_extra.cpp
        """)
    juce_env.Append(CCFLAGS='/D "WINDOWS=1" /D "_LIB" /D "WIN32" /D "_WINDOWS" /D "NDEBUG" /D "JUCE_DLL_BUILD=1" /arch:SSE')
    juce_env.Append(LINKFLAGS="/nodefaultlib:libcmt.lib")
    juce_env.Append(LINKFLAGS='WS2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib')
    juce_env.Append(LINKFLAGS='advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib')
    juce_env.Append(LINKFLAGS='odbccp32.lib wininet.lib shlwapi.lib version.lib imm32.lib winmm.lib ')

if env['IS_LINUX']:
    juce_files = Split("""
            modules/juce_audio_basics/juce_audio_basics.cpp
            modules/juce_audio_devices/juce_audio_devices.cpp
            modules/juce_audio_formats/juce_audio_formats.cpp
            modules/juce_audio_processors/juce_audio_processors.cpp
            modules/juce_audio_utils/juce_audio_utils.cpp
            modules/juce_core/juce_core.cpp
            modules/juce_cryptography/juce_cryptography.cpp
            modules/juce_data_structures/juce_data_structures.cpp
            modules/juce_events/juce_events.cpp
            modules/juce_graphics/juce_graphics.cpp
            modules/juce_gui_basics/juce_gui_basics.cpp
            modules/juce_gui_extra/juce_gui_extra.cpp
        """)
    juce_env.Append(CCFLAGS='-Wno-sign-compare -DLINUX=1 -DNDEBUG -DJUCE_DLL_BUILD')
    juce_env.Append(CPPPATH='/usr/include/freetype2')
    juce_env.Append(LIBS=Split('X11 freetype Xext asound'))

if env['IS_MACOSX']:
    juce_files = Split("""
            modules/juce_audio_basics/juce_audio_basics.mm
            modules/juce_audio_devices/juce_audio_devices.mm
            modules/juce_audio_formats/juce_audio_formats.mm
            modules/juce_audio_processors/juce_audio_processors.mm
            modules/juce_audio_utils/juce_audio_utils.mm
            modules/juce_core/juce_core.mm
            modules/juce_cryptography/juce_cryptography.mm
            modules/juce_data_structures/juce_data_structures.mm
            modules/juce_events/juce_events.mm
            modules/juce_graphics/juce_graphics.mm
            modules/juce_gui_basics/juce_gui_basics.mm
            modules/juce_gui_extra/juce_gui_extra.mm
        """)
    juce_env.Append(CCFLAGS='-Wno-uninitialized -Wno-sign-compare -DNDEBUG -DJUCE_DLL_BUILD')
    juce_env.Append(LINKFLAGS='-framework CoreAudio -framework CoreMIDI -framework AudioUnit -framework IOKit')
    juce_env.Append(LINKFLAGS='-framework Cocoa -framework Carbon -framework AppKit -framework QuartzCore')
    juce_env.Append(LINKFLAGS='-framework CoreFoundation -framework CoreAudioKit -framework AudioToolbox')

juce_env.Append(CPPPATH=me)
juce_env.PiSharedLibrary('pijuce',juce_files,package='eigend')

ejuce_env = env.Clone()
ejuce_files = Split('ejuce.cpp ejuce_laf.cpp')
ejuce_libraries = Split('pijuce pia pic')
ejuce_env.PiSharedLibrary('ejuce',ejuce_files,libraries=ejuce_libraries,package='eigend')

epython_env = env.Clone()
epython_files = Split('epython.cpp')
epython_libraries = Split('pia pie pic')
epython_env.PiSharedLibrary('epython',epython_files,libraries=epython_libraries,package='eigend')
