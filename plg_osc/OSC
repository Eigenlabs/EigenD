EigenD OSC Protocol v0.1
========================

This is an initial prototype implementation of the EigenD OSC protocol, which uses OSC in an
idiomatic fashion to expose very high resolution and very high bandwidth performance data of
a potentially large number of data streams.

Each server we implement will contain a number of agents.
Each agent is independent.

Persistent state values and fast data is logically independent to allow performance data to be
migrated to other network ports when there's a risk of overloading the network stack.

You can subscribe to state values without subscribing to the fast data and vice-versa.

This is the initial behavior that has been implemented.

/register AGENT [port [ address] ]

   Subscribe to changes in the port tree, metadata, and persistent values

/register-fast AGENT [port [ address] ]

   Subscribe to streaming performance data

Streaming data will be transmitted to subscribers as 

    /AGENT/eigend-port/N <event-id> <timestamp> <data values>

    Where N is a number as big as required to allow multiple 
    events to be sent.

This server currently supports only 1 agent in each server.
It will be called keyboard_1, and the udp port is hardcoded 
to 9999. This might change as the implementation and protocol matures.

Other data isn't implemented yet.  We need mechanisms for:

1.  Discovery of servers
2.  Enumeration of agents withing servers
3.  Enumeration of ports within agents and ports
4.  Reliability (sequence numbering, essentially)
5.  Current value requests (fast and slow)
6.  Metadata specification
7.  Clock synchronisation
8.  RPC
