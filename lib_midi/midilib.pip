<<<
#include <lib_midi/control_mapping.h>
#include <lib_midi/control_mapper_gui.h>
#include <lib_midi/midi_from_belcanto.h>
#include <lib_midi/midi_decoder.h>
#include <lib_midi/midi_converter.h>
#include <lib_midi/midi_output_port.h>
>>>

from piw_native[piw/piw.pip] import change_nb, clockdomain_ctl, cookie

class global_settings[midi::global_settings_t]
{
    global_settings(const global_settings &)
    global_settings()
    global_settings(unsigned, unsigned, unsigned, float, bool, bool, bool, float, float)

    global_settings clone_with_midi_channel(unsigned)
    global_settings clone_with_minimum_midi_channel(unsigned)
    global_settings clone_with_maximum_midi_channel(unsigned)
    global_settings clone_with_minimum_decimation(float)
    global_settings clone_with_send_notes(bool)
    global_settings clone_with_send_pitchbend(bool)
    global_settings clone_with_send_hires_velocity(bool)
    global_settings clone_with_pitchbend_semitones_up(float)
    global_settings clone_with_pitchbend_semitones_down(float)

    unsigned get_midi_channel()
    unsigned get_minimum_midi_channel()
    unsigned get_maximum_midi_channel()
    float get_minimum_decimation()
    bool get_send_notes()
    bool get_send_pitchbend()
    bool get_send_hires_velocity()
    float get_pitchbend_semitones_up()
    float get_pitchbend_semitones_down()
}

class mapping_info[midi::mapping_info_t]
{
    mapping_info(const mapping_info &)
    mapping_info(unsigned short)
    mapping_info(unsigned short, bool, float, float, float, float, bool, float, unsigned, unsigned, unsigned, int, unsigned)

    mapping_info clone_with_enabled(bool)
    mapping_info clone_with_scale(float)
    mapping_info clone_with_lo(float)
    mapping_info clone_with_base(float)
    mapping_info clone_with_hi(float)
    mapping_info clone_with_origin_return(bool)
    mapping_info clone_with_decimation(float)
    mapping_info clone_with_scope(unsigned)
    mapping_info clone_with_channelscope(unsigned)
    mapping_info clone_with_resolution(unsigned)
    mapping_info clone_with_secondarycc(int)
    mapping_info clone_with_curve(unsigned)
}

class midi_converter[midi::midi_converter_t]
{
    midi_converter(mapping_observer *, clockdomain_ctl *, midi_from_belcanto *, const stdstr &)

    clockdomain_ctl *clock_domain()

    cookie parameter_input_cookie(unsigned)
    void set_title(const stdstr &)
    void set_mapping(const stdstr &)
    stdstr get_mapping()
    void parameter_name_changed(unsigned)
    void map_param(unsigned,mapping_info)
    void map_midi(unsigned,mapping_info)
    void unmap_param(unsigned,unsigned short)
    void unmap_midi(unsigned,unsigned short)
    bool is_mapped_param(unsigned, unsigned short)
    bool is_mapped_midi(unsigned, unsigned short)
    mapping_info get_info_param(unsigned, unsigned short)
    mapping_info get_info_midi(unsigned, unsigned short)
    global_settings get_settings()
    void set_pitchbend_up(float )
    void set_pitchbend_down(float )
    void set_minimum_decimation(float)
    void set_midi_notes(bool)
    void set_midi_pitchbend(bool)
    void set_midi_hires_velocity(bool)
    void set_midi_channel(unsigned)
    void set_min_midi_channel(unsigned)
    void set_max_midi_channel(unsigned)
    void set_program_change(unsigned)
    change_nb change_program()
    void set_bank_change(unsigned)
    change_nb change_bank()
    void set_cc(unsigned, unsigned)
    change_nb change_cc()

    void close()
}

class mapping_observer[midi::mapping_observer_t]
{
    mapping_observer()
    virtual void mapping_changed(const stdstr &) = 0
    virtual void settings_changed() = 0
    virtual void parameter_changed(unsigned) = 0
    virtual stdstr get_parameter_name(unsigned) = 0
}

class midi_from_belcanto[midi::midi_from_belcanto_t]
{
    midi_from_belcanto(const cookie &, clockdomain_ctl *)
    cookie cookie()
    void set_midi_channel(unsigned)   
    void set_min_midi_channel(unsigned)   
    void set_max_midi_channel(unsigned)   
    void set_program_change(unsigned)
    change_nb change_program()
    void set_bank_change(unsigned)
    change_nb change_bank()
    void set_cc(unsigned, unsigned)
    change_nb change_cc()
    change_nb change_clock()
    void set_omni(bool)
    void set_velocity_samples(unsigned)
    void set_velocity_curve(float)
    void set_velocity_scale(float)
}

class midi_output_port[midi::midi_output_port_t]
{
    midi_output_port()
    bool set_port(long)
    long get_port()
    change_nb get_midi_output_functor()
    void set_source(const stdstr &)
    virtual void sink_added(long, const stdstr &)
    virtual void sink_removed(long)
    void run()
    void stop()
}
