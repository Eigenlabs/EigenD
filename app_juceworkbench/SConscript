Import('env')

workbench_files = Split("""
    juceworkbench.cpp WorkbenchFrame.cpp MainComponent.cpp PropertiesComponent.cpp
    PathCalculator.cpp Peg.cpp Trunk.cpp TrunkInput.cpp Hook.cpp Box.cpp Pin.cpp
    Wire.cpp TrunkDrawing.cpp  ToolManager.cpp CustomCursor.cpp
    CreateToolComponent.cpp TabsFrameBox.cpp WorkspaceManager.cpp Workspace.cpp
    PropertyEditor.cpp StringPropertyEditor.cpp BoolPropertyEditor.cpp FloatPropertyEditor.cpp
    IntPropertyEditor.cpp EnumPropertyEditor.cpp FindComponent.cpp SingleInputEditor.cpp
    DialogComponent.cpp utils.cpp MenuManager.cpp CreateInstanceComponent.cpp
    DeleteInstanceComponent.cpp NameEditor.cpp NamePropertyEditor.cpp WirePropertyPanel.cpp
    WireEditor.cpp DuplicatePanel.cpp BrowseEditor.cpp BrowseTreeView.cpp TreeDisplayComponent.cpp
    AboutComponent.cpp DeleteAgentConfirmation.cpp DeleteInstanceConfirmation.cpp DeletePegConfirmation.cpp 
    DeleteTrunkConfirmation.cpp DeleteWireConfirmation.cpp DeleteRouteConfirmation.cpp
    ejuce.cpp ejuce_laf.cpp PropertySeparator.cpp epython.cpp
    CreateAgentComponent.cpp HelpComponent.cpp HelpViewComponent.cpp PreferenceComponent.cpp
    XYMapComponent.cpp MappingEditor.cpp MusicalMappingComponent.cpp
    MappingPanel.cpp StringMappingPropertyEditor.cpp DeleteMapConfirmation.cpp EditMapConfirmation.cpp
    ErrorReportComponent.cpp ProgressLayer.cpp HeadPhoneWarningComponent.cpp KeyToCoursePropertyEditor.cpp
    KeyToCourseEditor.cpp KeyToCoursePanel.cpp XYToZComponent.cpp
    CoursePanel.cpp XYComponent.cpp StrummerEditor.cpp CoursesPropertyEditor.cpp
    CoursePanelContainer.cpp StrumKeyPanel.cpp 
    WBTabbedButtonBar.cpp
    WBTabbedComponent.cpp
""")

widget_libs = Split('pic pia piw pie pijuce')
env.Append(CPPPATH='.')
env.Append(CPPPATH='../lib_juce/modules')

if env['IS_WINDOWS']:
    env.Append(CCFLAGS='/D_WINDOWS /DNDEBUG /arch:SSE2')
    env.Append(LINKFLAGS="/nodefaultlib:libcmt.lib")
    env.Append(LINKFLAGS=' WS2_32.Lib ')

if env['IS_LINUX']:
    env.Append(CCFLAGS='-DLINUX -DNDEBUG')
    env.Append(CPPPATH='/usr/include/freetype2')
    env.Append(LIBS=Split('X11 freetype Xext asound'))

if env['IS_MACOSX']:
    env.Append(CCFLAGS="-DNDEBUG")
    env.Append(PI_HIRES=True)

env.PiGuiProgram('Workbench',workbench_files,libraries=widget_libs,appname='Workbench',package='eigend')
env.PiPipBinding('workbench_native','workbench.pip',libraries=widget_libs,package='eigend')
env.PiPythonPackage(package='eigend')
