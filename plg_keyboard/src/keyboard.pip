<<<
#include "kbd_bundle2.h"
>>>


from piw_native[piw/piw.pip] import cookie,change_nb,data
from picross_native[picross/picross.pip] import notify,usbdevice

class alpha2_bundle_legacy[kbd::alpha2_bundle_legacy_t] /gc/
{
    alpha2_bundle_legacy(const char *,const cookie &,const notify &)
    stdstr name()
    data get_rowlen()
    data get_rowoffset()
    data get_courselen()
    data get_courseoffset()
    void set_threshold1(float)
    float get_threshold1()
    void set_threshold2(float)
    float get_threshold2()
    float get_roll_axis_window()
    float get_yaw_axis_window()
    void set_roll_axis_window(float)
    void set_yaw_axis_window(float)
    change_nb led_functor()
    void close()
    void testmsg_write_lib(unsigned,unsigned,unsigned,unsigned)
    void testmsg_finish_lib()
    void testmsg_write_seq(unsigned,unsigned,unsigned)
    void testmsg_finish_seq()
    void start_test(unsigned)
    void learn_pedal_min(unsigned)
    void learn_pedal_max(unsigned)
    unsigned get_pedal_min(unsigned)
    unsigned get_pedal_max(unsigned)
    void set_pedal_min(unsigned,unsigned)
    void set_pedal_max(unsigned,unsigned)
    void arm_recording(unsigned)
    void restart()
}

class alpha2_bundle[kbd::alpha2_bundle_t] /gc/
{
    alpha2_bundle(usbdevice *,const cookie &,const cookie &,const notify &)
    stdstr name()
    data get_rowlen()
    data get_rowoffset()
    data get_courselen()
    data get_courseoffset()
    void set_threshold1(float)
    float get_threshold1()
    void set_threshold2(float)
    float get_threshold2()
    float get_roll_axis_window()
    float get_yaw_axis_window()
    void set_roll_axis_window(float)
    void set_yaw_axis_window(float)
    change_nb led_functor()
    void close()
    void testmsg_write_lib(unsigned,unsigned,unsigned,unsigned)
    void testmsg_finish_lib()
    void testmsg_write_seq(unsigned,unsigned,unsigned)
    void testmsg_finish_seq()
    void start_test(unsigned)
    void learn_pedal_min(unsigned)
    void learn_pedal_max(unsigned)
    unsigned get_pedal_min(unsigned)
    unsigned get_pedal_max(unsigned)
    void set_pedal_min(unsigned,unsigned)
    void set_pedal_max(unsigned,unsigned)
    cookie audio_cookie()
    void mic_enable(bool)
    void mic_type(unsigned)
    void mic_gain(unsigned)
    void mic_pad(bool)
    void mic_automute(bool)
    void mic_disabled(const notify &)
    void headphone_enable(bool)
    void headphone_limit(bool)
    void loopback_enable(bool)
    void loopback_gain(float)
    void headphone_gain(unsigned)
    void arm_recording(unsigned)
    void set_mic_quality(unsigned)
    void set_hp_quality(unsigned)
    void restart()
    void debounce_time(unsigned long);
    void threshold_time(unsigned long long);
    void key_threshold(unsigned);
    void key_noise(unsigned);
}

class tau_bundle[kbd::tau_bundle_t] /gc/
{
    tau_bundle(usbdevice *,const cookie &,const notify &)
    stdstr name()
    data get_rowlen()
    data get_rowoffset()
    data get_courselen()
    data get_courseoffset()
    void set_threshold1(float)
    float get_threshold1()
    void set_threshold2(float)
    float get_threshold2()
    float get_roll_axis_window()
    float get_yaw_axis_window()
    void set_roll_axis_window(float)
    void set_yaw_axis_window(float)
    change_nb led_functor()
    void close()
    void testmsg_write_lib(unsigned,unsigned,unsigned,unsigned)
    void testmsg_finish_lib()
    void testmsg_write_seq(unsigned,unsigned,unsigned)
    void testmsg_finish_seq()
    void start_test(unsigned)
    void learn_pedal_min(unsigned)
    void learn_pedal_max(unsigned)
    unsigned get_pedal_min(unsigned)
    unsigned get_pedal_max(unsigned)
    void set_pedal_min(unsigned,unsigned)
    void set_pedal_max(unsigned,unsigned)
    cookie audio_cookie()
    void headphone_enable(bool)
    void headphone_limit(bool)
    void headphone_gain(unsigned)
    void arm_recording(unsigned)
    void set_hp_quality(unsigned)
    void restart()
    void debounce_time(unsigned long);
    void threshold_time(unsigned long long);
    void key_threshold(unsigned);
    void key_noise(unsigned);
}
