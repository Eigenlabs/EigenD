<<<
#include <lib_alpha1/alpha1_passive.h>
#include <lib_alpha1/alpha1_download.h>
>>>


class passive[alpha1::passive_t]
    """
    Passive USB keyboard controller
    
    a passive connects to the usb instrument with the specified name.
    The name is an OS specific name, e.g. /proc/bus/usb/xxx/yyy on linux
    It provides no callbacks; key data is passively collected and stored
    for retrieval
    
    Initialisers
    ============
    
    passive(name,decimate)
       - usbname: usbname of keyboard
       - decimate: decimation factor
    """
{

    passive(const char *,unsigned)
    unsigned short get_rawkey(unsigned,unsigned)
        """
        keyboard.get_rawkey(key,corner) -> sensor_value
        
        Get the current raw sensor reading for corner of key
        
        """
    void start_calibration_row(unsigned,unsigned)
        """
        keyboard.start_calibration_row(key,sensor)

        Set the key and sensor of the row currently being calibrated
        """
    void set_calibration_range(unsigned short,unsigned short)
        """
        keyboard.set_normalisation(min,max)
        
        Set the range for corner of key.
        """
    void set_calibration_point(unsigned,unsigned short)
        """
        keyboard.set_normalisation(point,value)
        
        Set a point in the calibration table.
        """
    void write_calibration_row()
        """
        keyboard.write_calibration_row()
        
        Send one row of the calibration table to the instrument
        """
    void commit_calibration()
        """
        commit the instrument's calibration data to flash
        """
    const char *get_name()
        """
        keyboard.get_name() -> name
        
        Return the dsp serial number of the keyboard
        """
    bool wait()
        """
        keyboard.wait() -> success
        
        Wait for a complete raw scan cycle.
        If return is false, you missed your frame (taking into account
        the decimation factor)
        """
    void sync()
        """
        keyboard.sync() -> .

        Reset the sync state of the keyboard raw data with the receiver.
        """
    void set_ledcolour(unsigned,unsigned)
        """
        keyboard.set_ledcolour(key,colour) -> .
        
        Set the LED on a given key to the indicated colour.  Colour is
        made up of two bit rgb values with r occupying bits 4 and 5, g
        occupying bits 2 and 3, and b occupying bits 0 and 1
        """
    void set_ledrgb(unsigned,unsigned,unsigned,unsigned)
        """
        keyboard.set_ledrgb(key,r,g,b) -> .
        
        Set the LED on a given key to the indicated RGB values.  RGB
        are from 0-3
        """
    unsigned long count()
    void clear_calibration()
    unsigned get_temperature()
    void start()
    void stop()

    void start_collecting()
    void stop_collecting()
    unsigned short get_collected_key(unsigned, unsigned, unsigned)
    unsigned collect_count()

    unsigned short get_strip1()
    unsigned short get_strip2()
    unsigned short get_breath()
}

void tms_download[alpha1::tms_download](const char *,const char *)
