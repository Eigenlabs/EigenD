/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_twiddle_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -include fftw-spu.h -trivial-stores -n 9 -name X(spu_t1fv_9) */

/*
 * This function contains 54 FP additions, 54 FP multiplications,
 * (or, 20 additions, 20 multiplications, 34 fused multiply/add),
 * 84 stack variables, 19 constants, and 18 memory accesses
 */
#include "fftw-spu.h"

void X(spu_t1fv_9) (R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms) {
     DVK(KP666666666, +0.666666666666666666666666666666666666666666667);
     DVK(KP852868531, +0.852868531952443209628250963940074071936020296);
     DVK(KP673648177, +0.673648177666930348851716626769314796000375677);
     DVK(KP898197570, +0.898197570222573798468955502359086394667167570);
     DVK(KP879385241, +0.879385241571816768108218554649462939872416269);
     DVK(KP984807753, +0.984807753012208059366743024589523013670643252);
     DVK(KP826351822, +0.826351822333069651148283373230685203999624323);
     DVK(KP420276625, +0.420276625461206169731530603237061658838781920);
     DVK(KP939692620, +0.939692620785908384054109277324731469936208134);
     DVK(KP907603734, +0.907603734547952313649323976213898122064543220);
     DVK(KP347296355, +0.347296355333860697703433253538629592000751354);
     DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
     DVK(KP152703644, +0.152703644666139302296566746461370407999248646);
     DVK(KP203604859, +0.203604859554852403062088995281827210665664861);
     DVK(KP726681596, +0.726681596905677465811651808188092531873167623);
     DVK(KP968908795, +0.968908795874236621082202410917456709164223497);
     DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
     DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
     DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
     INT m;
     R *x;
     x = ri;
     for (m = mb, W = W + (mb * ((TWVL / VL) * 16)); m < me; m = m + VL, x = x + (VL * ms), W = W + (TWVL * 16), MAKE_VOLATILE_STRIDE(rs)) {
	  V TG, T7, Tu, Tw, Tx, Tf, Ty, Tv, Tn, Tz, TD, TP, TL, TK, TO;
	  V T1, T5, T3, T4, T2, T6, T9, Th, Te, Tm, T8, Tg, Tb, Td, Ta;
	  V Tc, Tj, Tl, Ti, Tk, Tr, Tp, Tq, To, Ts, Tt, TC, TH, TB, TA;
	  V TF, TE, TJ, TI, TN, TW, TR, TZ, TX, TQ, TM, TV, TU, TY, TT;
	  V T10, TS, T11;
	  T1 = LD(&(x[0]), ms, &(x[0]));
	  T4 = LD(&(x[WS(rs, 6)]), ms, &(x[0]));
	  T5 = BYTWJ(&(W[TWVL * 10]), T4);
	  T2 = LD(&(x[WS(rs, 3)]), ms, &(x[WS(rs, 1)]));
	  T3 = BYTWJ(&(W[TWVL * 4]), T2);
	  TG = VSUB(T5, T3);
	  T6 = VADD(T3, T5);
	  T7 = VADD(T1, T6);
	  Tu = VFNMS(LDK(KP500000000), T6, T1);
	  T8 = LD(&(x[WS(rs, 1)]), ms, &(x[WS(rs, 1)]));
	  T9 = BYTWJ(&(W[0]), T8);
	  Tg = LD(&(x[WS(rs, 2)]), ms, &(x[0]));
	  Th = BYTWJ(&(W[TWVL * 2]), Tg);
	  Ta = LD(&(x[WS(rs, 4)]), ms, &(x[0]));
	  Tb = BYTWJ(&(W[TWVL * 6]), Ta);
	  Tc = LD(&(x[WS(rs, 7)]), ms, &(x[WS(rs, 1)]));
	  Td = BYTWJ(&(W[TWVL * 12]), Tc);
	  Te = VADD(Tb, Td);
	  Tw = VSUB(Tb, Td);
	  Ti = LD(&(x[WS(rs, 5)]), ms, &(x[WS(rs, 1)]));
	  Tj = BYTWJ(&(W[TWVL * 8]), Ti);
	  Tk = LD(&(x[WS(rs, 8)]), ms, &(x[0]));
	  Tl = BYTWJ(&(W[TWVL * 14]), Tk);
	  Tx = VSUB(Tl, Tj);
	  Tm = VADD(Tj, Tl);
	  Tf = VADD(T9, Te);
	  Ty = VFNMS(LDK(KP500000000), Te, T9);
	  Tv = VFNMS(LDK(KP500000000), Tm, Th);
	  Tn = VADD(Th, Tm);
	  Tz = VFNMS(LDK(KP586256827), Ty, Tx);
	  TD = VFNMS(LDK(KP439692620), Tw, Tv);
	  TP = VFMA(LDK(KP968908795), Ty, Tw);
	  TL = VFNMS(LDK(KP726681596), Tw, Ty);
	  TK = VFMA(LDK(KP203604859), Tv, Tx);
	  TO = VFNMS(LDK(KP152703644), Tx, Tv);
	  Tr = VMUL(LDK(KP866025403), VSUB(Tn, Tf));
	  To = VADD(Tf, Tn);
	  Tp = VADD(T7, To);
	  Tq = VFNMS(LDK(KP500000000), To, T7);
	  ST(&(x[0]), Tp, ms, &(x[0]));
	  Ts = VFNMSI(Tr, Tq);
	  Tt = VFMAI(Tr, Tq);
	  ST(&(x[WS(rs, 3)]), Tt, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 6)]), Ts, ms, &(x[0]));
	  TA = VFNMS(LDK(KP347296355), Tz, Tw);
	  TB = VFNMS(LDK(KP907603734), TA, Tv);
	  TC = VFNMS(LDK(KP939692620), TB, Tu);
	  TE = VFNMS(LDK(KP420276625), TD, Tx);
	  TF = VFNMS(LDK(KP826351822), TE, Ty);
	  TH = VMUL(LDK(KP984807753), VFMA(LDK(KP879385241), TG, TF));
	  TJ = VFMAI(TH, TC);
	  TI = VFNMSI(TH, TC);
	  ST(&(x[WS(rs, 2)]), TI, ms, &(x[0]));
	  ST(&(x[WS(rs, 7)]), TJ, ms, &(x[WS(rs, 1)]));
	  TX = VFNMS(LDK(KP898197570), TL, TK);
	  TM = VFMA(LDK(KP898197570), TL, TK);
	  TU = VFNMS(LDK(KP673648177), TP, TO);
	  TQ = VFMA(LDK(KP673648177), TP, TO);
	  TV = VFNMS(LDK(KP500000000), TM, TU);
	  TN = VFMA(LDK(KP852868531), TM, Tu);
	  TW = VFMA(LDK(KP852868531), TV, Tu);
	  TY = VFMA(LDK(KP666666666), TQ, TX);
	  TR = VMUL(LDK(KP984807753), VFNMS(LDK(KP879385241), TG, TQ));
	  TZ = VMUL(LDK(KP866025403), VFMA(LDK(KP852868531), TY, TG));
	  TT = VFMAI(TR, TN);
	  TS = VFNMSI(TR, TN);
	  ST(&(x[WS(rs, 1)]), TS, ms, &(x[WS(rs, 1)]));
	  T10 = VFNMSI(TZ, TW);
	  T11 = VFMAI(TZ, TW);
	  ST(&(x[WS(rs, 4)]), T11, ms, &(x[0]));
	  ST(&(x[WS(rs, 8)]), TT, ms, &(x[0]));
	  ST(&(x[WS(rs, 5)]), T10, ms, &(x[WS(rs, 1)]));
     }
}
