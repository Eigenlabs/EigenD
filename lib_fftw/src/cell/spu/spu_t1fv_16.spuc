/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_twiddle_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -include fftw-spu.h -trivial-stores -n 16 -name X(spu_t1fv_16) */

/*
 * This function contains 87 FP additions, 64 FP multiplications,
 * (or, 53 additions, 30 multiplications, 34 fused multiply/add),
 * 108 stack variables, 3 constants, and 32 memory accesses
 */
#include "fftw-spu.h"

void X(spu_t1fv_16) (R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms) {
     DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
     DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
     DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
     INT m;
     R *x;
     x = ri;
     for (m = mb, W = W + (mb * ((TWVL / VL) * 30)); m < me; m = m + VL, x = x + (VL * ms), W = W + (TWVL * 30), MAKE_VOLATILE_STRIDE(rs)) {
	  V T14, T1h, Ta, TS, TJ, TT, T17, T1i, Tl, TV, T1b, T1k, Tw, TW, T1e;
	  V T1l, T1, T8, T3, T6, T7, T2, T5, T4, T9, TA, TH, TC, TF, Tz;
	  V TG, TB, TE, T16, T15, TD, TI, Tc, Tj, Te, Th, Tb, Ti, Td, Tg;
	  V T19, T1a, Tf, Tk, Tn, Tu, Tp, Ts, Tm, Tt, To, Tr, T1c, T1d, Tq;
	  V Tv, T10, T11, TY, TZ, TU, TX, T12, T13, TO, Ty, TL, TP, TK, Tx;
	  V TN, TQ, TM, TR, T1u, T1y, T1x, T1v, T1g, T1q, T1n, T1r, T18, T1f, T1j;
	  V T1m, T1p, T1s, T1o, T1t, T1w, T1C, T1z, T1D, T1B, T1E, T1A, T1F;
	  T1 = LD(&(x[0]), ms, &(x[0]));
	  T7 = LD(&(x[WS(rs, 12)]), ms, &(x[0]));
	  T8 = BYTWJ(&(W[TWVL * 22]), T7);
	  T2 = LD(&(x[WS(rs, 8)]), ms, &(x[0]));
	  T3 = BYTWJ(&(W[TWVL * 14]), T2);
	  T5 = LD(&(x[WS(rs, 4)]), ms, &(x[0]));
	  T6 = BYTWJ(&(W[TWVL * 6]), T5);
	  T14 = VSUB(T1, T3);
	  T4 = VADD(T1, T3);
	  T9 = VADD(T6, T8);
	  T1h = VSUB(T6, T8);
	  Ta = VSUB(T4, T9);
	  TS = VADD(T4, T9);
	  Tz = LD(&(x[WS(rs, 14)]), ms, &(x[0]));
	  TA = BYTWJ(&(W[TWVL * 26]), Tz);
	  TG = LD(&(x[WS(rs, 10)]), ms, &(x[0]));
	  TH = BYTWJ(&(W[TWVL * 18]), TG);
	  TB = LD(&(x[WS(rs, 6)]), ms, &(x[0]));
	  TC = BYTWJ(&(W[TWVL * 10]), TB);
	  TE = LD(&(x[WS(rs, 2)]), ms, &(x[0]));
	  TF = BYTWJ(&(W[TWVL * 2]), TE);
	  TD = VADD(TA, TC);
	  T16 = VSUB(TA, TC);
	  T15 = VSUB(TF, TH);
	  TI = VADD(TF, TH);
	  TJ = VSUB(TD, TI);
	  TT = VADD(TI, TD);
	  T17 = VADD(T15, T16);
	  T1i = VSUB(T16, T15);
	  Tb = LD(&(x[WS(rs, 1)]), ms, &(x[WS(rs, 1)]));
	  Tc = BYTWJ(&(W[0]), Tb);
	  Ti = LD(&(x[WS(rs, 13)]), ms, &(x[WS(rs, 1)]));
	  Tj = BYTWJ(&(W[TWVL * 24]), Ti);
	  Td = LD(&(x[WS(rs, 9)]), ms, &(x[WS(rs, 1)]));
	  Te = BYTWJ(&(W[TWVL * 16]), Td);
	  Tg = LD(&(x[WS(rs, 5)]), ms, &(x[WS(rs, 1)]));
	  Th = BYTWJ(&(W[TWVL * 8]), Tg);
	  Tf = VADD(Tc, Te);
	  T19 = VSUB(Tc, Te);
	  T1a = VSUB(Th, Tj);
	  Tk = VADD(Th, Tj);
	  Tl = VSUB(Tf, Tk);
	  TV = VADD(Tf, Tk);
	  T1b = VFNMS(LDK(KP414213562), T1a, T19);
	  T1k = VFMA(LDK(KP414213562), T19, T1a);
	  Tm = LD(&(x[WS(rs, 15)]), ms, &(x[WS(rs, 1)]));
	  Tn = BYTWJ(&(W[TWVL * 28]), Tm);
	  Tt = LD(&(x[WS(rs, 11)]), ms, &(x[WS(rs, 1)]));
	  Tu = BYTWJ(&(W[TWVL * 20]), Tt);
	  To = LD(&(x[WS(rs, 7)]), ms, &(x[WS(rs, 1)]));
	  Tp = BYTWJ(&(W[TWVL * 12]), To);
	  Tr = LD(&(x[WS(rs, 3)]), ms, &(x[WS(rs, 1)]));
	  Ts = BYTWJ(&(W[TWVL * 4]), Tr);
	  Tq = VADD(Tn, Tp);
	  T1c = VSUB(Tn, Tp);
	  T1d = VSUB(Tu, Ts);
	  Tv = VADD(Ts, Tu);
	  Tw = VSUB(Tq, Tv);
	  TW = VADD(Tq, Tv);
	  T1e = VFNMS(LDK(KP414213562), T1d, T1c);
	  T1l = VFMA(LDK(KP414213562), T1c, T1d);
	  TU = VADD(TS, TT);
	  T10 = VSUB(TS, TT);
	  T11 = VSUB(TW, TV);
	  TX = VADD(TV, TW);
	  TY = VSUB(TU, TX);
	  TZ = VADD(TU, TX);
	  ST(&(x[WS(rs, 8)]), TY, ms, &(x[0]));
	  ST(&(x[0]), TZ, ms, &(x[0]));
	  T12 = VFNMSI(T11, T10);
	  T13 = VFMAI(T11, T10);
	  ST(&(x[WS(rs, 12)]), T12, ms, &(x[0]));
	  ST(&(x[WS(rs, 4)]), T13, ms, &(x[0]));
	  Tx = VADD(Tl, Tw);
	  TK = VSUB(Tw, Tl);
	  TO = VFMA(LDK(KP707106781), Tx, Ta);
	  Ty = VFNMS(LDK(KP707106781), Tx, Ta);
	  TL = VFNMS(LDK(KP707106781), TK, TJ);
	  TP = VFMA(LDK(KP707106781), TK, TJ);
	  TM = VFNMSI(TL, Ty);
	  TN = VFMAI(TL, Ty);
	  ST(&(x[WS(rs, 6)]), TM, ms, &(x[0]));
	  TR = VFMAI(TP, TO);
	  TQ = VFNMSI(TP, TO);
	  ST(&(x[WS(rs, 2)]), TR, ms, &(x[0]));
	  ST(&(x[WS(rs, 10)]), TN, ms, &(x[0]));
	  ST(&(x[WS(rs, 14)]), TQ, ms, &(x[0]));
	  T18 = VFMA(LDK(KP707106781), T17, T14);
	  T1u = VFNMS(LDK(KP707106781), T17, T14);
	  T1y = VSUB(T1e, T1b);
	  T1f = VADD(T1b, T1e);
	  T1g = VFNMS(LDK(KP923879532), T1f, T18);
	  T1q = VFMA(LDK(KP923879532), T1f, T18);
	  T1j = VFNMS(LDK(KP707106781), T1i, T1h);
	  T1x = VFMA(LDK(KP707106781), T1i, T1h);
	  T1v = VADD(T1k, T1l);
	  T1m = VSUB(T1k, T1l);
	  T1n = VFNMS(LDK(KP923879532), T1m, T1j);
	  T1r = VFMA(LDK(KP923879532), T1m, T1j);
	  T1o = VFNMSI(T1n, T1g);
	  T1p = VFMAI(T1n, T1g);
	  ST(&(x[WS(rs, 9)]), T1o, ms, &(x[WS(rs, 1)]));
	  T1t = VFMAI(T1r, T1q);
	  T1s = VFNMSI(T1r, T1q);
	  ST(&(x[WS(rs, 15)]), T1t, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 7)]), T1p, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 1)]), T1s, ms, &(x[WS(rs, 1)]));
	  T1w = VFNMS(LDK(KP923879532), T1v, T1u);
	  T1C = VFMA(LDK(KP923879532), T1v, T1u);
	  T1z = VFNMS(LDK(KP923879532), T1y, T1x);
	  T1D = VFMA(LDK(KP923879532), T1y, T1x);
	  T1A = VFNMSI(T1z, T1w);
	  T1B = VFMAI(T1z, T1w);
	  ST(&(x[WS(rs, 5)]), T1A, ms, &(x[WS(rs, 1)]));
	  T1F = VFNMSI(T1D, T1C);
	  T1E = VFMAI(T1D, T1C);
	  ST(&(x[WS(rs, 13)]), T1F, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 11)]), T1B, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 3)]), T1E, ms, &(x[WS(rs, 1)]));
     }
}
