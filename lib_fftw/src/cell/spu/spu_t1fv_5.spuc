/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_twiddle_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -include fftw-spu.h -trivial-stores -n 5 -name X(spu_t1fv_5) */

/*
 * This function contains 20 FP additions, 19 FP multiplications,
 * (or, 11 additions, 10 multiplications, 9 fused multiply/add),
 * 31 stack variables, 4 constants, and 10 memory accesses
 */
#include "fftw-spu.h"

void X(spu_t1fv_5) (R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms) {
     DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
     DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
     DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
     DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
     INT m;
     R *x;
     x = ri;
     for (m = mb, W = W + (mb * ((TWVL / VL) * 8)); m < me; m = m + VL, x = x + (VL * ms), W = W + (TWVL * 8), MAKE_VOLATILE_STRIDE(rs)) {
	  V T1, Tg, Th, Tc, Te, T3, Ta, T5, T8, T2, T9, T4, T7, T6, Tb;
	  V Td, Tp, Ti, Tm, Tl, Tf, Tk, Tn, Tj, To;
	  T1 = LD(&(x[0]), ms, &(x[0]));
	  T2 = LD(&(x[WS(rs, 1)]), ms, &(x[WS(rs, 1)]));
	  T3 = BYTWJ(&(W[0]), T2);
	  T9 = LD(&(x[WS(rs, 3)]), ms, &(x[WS(rs, 1)]));
	  Ta = BYTWJ(&(W[TWVL * 4]), T9);
	  T4 = LD(&(x[WS(rs, 4)]), ms, &(x[0]));
	  T5 = BYTWJ(&(W[TWVL * 6]), T4);
	  T7 = LD(&(x[WS(rs, 2)]), ms, &(x[0]));
	  T8 = BYTWJ(&(W[TWVL * 2]), T7);
	  Tg = VSUB(T3, T5);
	  T6 = VADD(T3, T5);
	  Tb = VADD(T8, Ta);
	  Th = VSUB(T8, Ta);
	  Tc = VADD(T6, Tb);
	  Te = VSUB(T6, Tb);
	  Tp = VADD(T1, Tc);
	  Td = VFNMS(LDK(KP250000000), Tc, T1);
	  ST(&(x[0]), Tp, ms, &(x[0]));
	  Ti = VMUL(LDK(KP951056516), VFMA(LDK(KP618033988), Th, Tg));
	  Tm = VMUL(LDK(KP951056516), VFNMS(LDK(KP618033988), Tg, Th));
	  Tl = VFNMS(LDK(KP559016994), Te, Td);
	  Tf = VFMA(LDK(KP559016994), Te, Td);
	  Tk = VFMAI(Ti, Tf);
	  Tj = VFNMSI(Ti, Tf);
	  ST(&(x[WS(rs, 1)]), Tj, ms, &(x[WS(rs, 1)]));
	  Tn = VFMAI(Tm, Tl);
	  To = VFNMSI(Tm, Tl);
	  ST(&(x[WS(rs, 3)]), To, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 4)]), Tk, ms, &(x[0]));
	  ST(&(x[WS(rs, 2)]), Tn, ms, &(x[0]));
     }
}
