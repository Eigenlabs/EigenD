/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -n 9 -name X(spu_n2fv_9) */

/*
 * This function contains 46 FP additions, 38 FP multiplications,
 * (or, 12 additions, 4 multiplications, 34 fused multiply/add),
 * 68 stack variables, 19 constants, and 18 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_9) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP666666666, +0.666666666666666666666666666666666666666666667);
     DVK(KP852868531, +0.852868531952443209628250963940074071936020296);
     DVK(KP673648177, +0.673648177666930348851716626769314796000375677);
     DVK(KP898197570, +0.898197570222573798468955502359086394667167570);
     DVK(KP879385241, +0.879385241571816768108218554649462939872416269);
     DVK(KP984807753, +0.984807753012208059366743024589523013670643252);
     DVK(KP939692620, +0.939692620785908384054109277324731469936208134);
     DVK(KP826351822, +0.826351822333069651148283373230685203999624323);
     DVK(KP420276625, +0.420276625461206169731530603237061658838781920);
     DVK(KP907603734, +0.907603734547952313649323976213898122064543220);
     DVK(KP347296355, +0.347296355333860697703433253538629592000751354);
     DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
     DVK(KP726681596, +0.726681596905677465811651808188092531873167623);
     DVK(KP968908795, +0.968908795874236621082202410917456709164223497);
     DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
     DVK(KP203604859, +0.203604859554852403062088995281827210665664861);
     DVK(KP152703644, +0.152703644666139302296566746461370407999248646);
     DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
     DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V Tv, Tj, T5, Tl, Tm, Ta, Tn, Tk, Tf, Ts, TB, Tx, To, TC, Ty;
	  V T1, T4, T2, T3, T6, Tb, T9, Te, T7, T8, Tc, Td, Ti, Tg, Th;
	  V Tq, Tu, Tp, Tt, Tr, Tw, TA, TG, TE, TJ, TI, TD, Tz, TF, TH;
	  V TK;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  T3 = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  T4 = VADD(T2, T3);
	  Tv = VSUB(T3, T2);
	  Tj = VFNMS(LDK(KP500000000), T4, T1);
	  T5 = VADD(T1, T4);
	  T6 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  Tb = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T7 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  T8 = LD(&(xi[WS(is, 7)]), ivs, &(xi[WS(is, 1)]));
	  T9 = VADD(T7, T8);
	  Tl = VSUB(T7, T8);
	  Tc = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  Td = LD(&(xi[WS(is, 8)]), ivs, &(xi[0]));
	  Te = VADD(Tc, Td);
	  Tm = VSUB(Td, Tc);
	  Ta = VADD(T6, T9);
	  Tn = VFNMS(LDK(KP500000000), T9, T6);
	  Tk = VFNMS(LDK(KP500000000), Te, Tb);
	  Tf = VADD(Tb, Te);
	  Ts = VFNMS(LDK(KP439692620), Tl, Tk);
	  TB = VFNMS(LDK(KP152703644), Tm, Tk);
	  Tx = VFMA(LDK(KP203604859), Tk, Tm);
	  To = VFNMS(LDK(KP586256827), Tn, Tm);
	  TC = VFMA(LDK(KP968908795), Tn, Tl);
	  Ty = VFNMS(LDK(KP726681596), Tl, Tn);
	  Ti = VMUL(LDK(KP866025403), VSUB(Tf, Ta));
	  Tg = VADD(Ta, Tf);
	  Th = VFNMS(LDK(KP500000000), Tg, T5);
	  ST(&(xo[0]), VADD(T5, Tg), ovs, &(xo[0]));
	  ST(&(xo[6]), VFMAI(Ti, Th), ovs, &(xo[2]));
	  ST(&(xo[12]), VFNMSI(Ti, Th), ovs, &(xo[0]));
	  Tp = VFNMS(LDK(KP347296355), To, Tl);
	  Tq = VFNMS(LDK(KP907603734), Tp, Tk);
	  Tt = VFNMS(LDK(KP420276625), Ts, Tm);
	  Tu = VFNMS(LDK(KP826351822), Tt, Tn);
	  Tr = VFNMS(LDK(KP939692620), Tq, Tj);
	  Tw = VMUL(LDK(KP984807753), VFMA(LDK(KP879385241), Tv, Tu));
	  ST(&(xo[4]), VFNMSI(Tw, Tr), ovs, &(xo[0]));
	  ST(&(xo[14]), VFMAI(Tw, Tr), ovs, &(xo[2]));
	  Tz = VFMA(LDK(KP898197570), Ty, Tx);
	  TI = VFNMS(LDK(KP898197570), Ty, Tx);
	  TD = VFMA(LDK(KP673648177), TC, TB);
	  TF = VFNMS(LDK(KP673648177), TC, TB);
	  TA = VFMA(LDK(KP852868531), Tz, Tj);
	  TG = VFNMS(LDK(KP500000000), Tz, TF);
	  TE = VMUL(LDK(KP984807753), VFNMS(LDK(KP879385241), Tv, TD));
	  TJ = VFMA(LDK(KP666666666), TD, TI);
	  ST(&(xo[2]), VFNMSI(TE, TA), ovs, &(xo[2]));
	  ST(&(xo[16]), VFMAI(TE, TA), ovs, &(xo[0]));
	  TH = VFMA(LDK(KP852868531), TG, Tj);
	  TK = VMUL(LDK(KP866025403), VFMA(LDK(KP852868531), TJ, Tv));
	  ST(&(xo[10]), VFNMSI(TK, TH), ovs, &(xo[2]));
	  ST(&(xo[8]), VFMAI(TK, TH), ovs, &(xo[0]));
     }
}
