/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -store-multiple 2 -n 14 -name X(spu_n2fv_14) */

/*
 * This function contains 74 FP additions, 48 FP multiplications,
 * (or, 32 additions, 6 multiplications, 42 fused multiply/add),
 * 93 stack variables, 6 constants, and 35 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_14) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP801937735, +0.801937735804838252472204639014890102331838324);
     DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
     DVK(KP554958132, +0.554958132087371191422194871006410481067288862);
     DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
     DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
     DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V TH, T3, Ta, Ts, TV, TN, TK, TW, Tt, To, Th, Tu, TU, TQ, Tp;
	  V TC, Tx, TR, T14, TZ, T1, T2, TI, T6, TJ, T9, TP, Tn, TO, Tk;
	  V TM, Tg, TL, Td, T4, T5, T7, T8, Tl, Tm, Ti, Tj, Te, Tf, Tb;
	  V Tc, T1a, T1b, T19, T1c, Tr, Tw, Tq, Tv, T16, T18, T15, T17, T1d, T1e;
	  V T1f, T1i, Tz, TB, Ty, TA, T1g, TT, TY, TS, TX, T1h, T1j, T11, T13;
	  V T10, T12, T1k, TE, TG, TD, TF, T1l, T1m;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 7)]), ivs, &(xi[WS(is, 1)]));
	  TH = VADD(T1, T2);
	  T3 = VSUB(T1, T2);
	  T4 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T5 = LD(&(xi[WS(is, 9)]), ivs, &(xi[WS(is, 1)]));
	  TI = VADD(T4, T5);
	  T6 = VSUB(T4, T5);
	  T7 = LD(&(xi[WS(is, 12)]), ivs, &(xi[0]));
	  T8 = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  TJ = VADD(T7, T8);
	  T9 = VSUB(T7, T8);
	  Tl = LD(&(xi[WS(is, 8)]), ivs, &(xi[0]));
	  Tm = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  TP = VADD(Tl, Tm);
	  Tn = VSUB(Tl, Tm);
	  Ti = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  Tj = LD(&(xi[WS(is, 13)]), ivs, &(xi[WS(is, 1)]));
	  TO = VADD(Ti, Tj);
	  Tk = VSUB(Ti, Tj);
	  Te = LD(&(xi[WS(is, 10)]), ivs, &(xi[0]));
	  Tf = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  TM = VADD(Te, Tf);
	  Tg = VSUB(Te, Tf);
	  Tb = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  Tc = LD(&(xi[WS(is, 11)]), ivs, &(xi[WS(is, 1)]));
	  TL = VADD(Tb, Tc);
	  Td = VSUB(Tb, Tc);
	  Ta = VADD(T6, T9);
	  Ts = VSUB(T9, T6);
	  TV = VSUB(TL, TM);
	  TN = VADD(TL, TM);
	  TK = VADD(TI, TJ);
	  TW = VSUB(TJ, TI);
	  Tt = VSUB(Tn, Tk);
	  To = VADD(Tk, Tn);
	  Th = VADD(Td, Tg);
	  Tu = VSUB(Tg, Td);
	  TU = VSUB(TO, TP);
	  TQ = VADD(TO, TP);
	  Tp = VFNMS(LDK(KP356895867), Ta, To);
	  TC = VFNMS(LDK(KP356895867), To, Th);
	  Tx = VFNMS(LDK(KP356895867), Th, Ta);
	  TR = VFNMS(LDK(KP356895867), TQ, TN);
	  T14 = VFNMS(LDK(KP356895867), TN, TK);
	  TZ = VFNMS(LDK(KP356895867), TK, TQ);
	  T19 = VADD(T3, VADD(Ta, VADD(Th, To)));
	  STM2(&(xo[14]), T19, ovs, &(xo[2]));
	  T1a = VADD(TH, VADD(TK, VADD(TN, TQ)));
	  STM2(&(xo[0]), T1a, ovs, &(xo[0]));
	  Tq = VFNMS(LDK(KP692021471), Tp, Th);
	  Tr = VFNMS(LDK(KP900968867), Tq, T3);
	  Tv = VFMA(LDK(KP554958132), Tu, Tt);
	  Tw = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), Tv, Ts));
	  T1b = VFNMSI(Tw, Tr);
	  STM2(&(xo[10]), T1b, ovs, &(xo[2]));
	  T1c = VFMAI(Tw, Tr);
	  STM2(&(xo[18]), T1c, ovs, &(xo[2]));
	  T15 = VFNMS(LDK(KP692021471), T14, TQ);
	  T16 = VFNMS(LDK(KP900968867), T15, TH);
	  T17 = VFNMS(LDK(KP554958132), TU, TW);
	  T18 = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), T17, TV));
	  T1d = VFMAI(T18, T16);
	  STM2(&(xo[12]), T1d, ovs, &(xo[0]));
	  STN2(&(xo[12]), T1d, T19, ovs);
	  T1e = VFNMSI(T18, T16);
	  STM2(&(xo[16]), T1e, ovs, &(xo[0]));
	  STN2(&(xo[16]), T1e, T1c, ovs);
	  Ty = VFNMS(LDK(KP692021471), Tx, To);
	  Tz = VFNMS(LDK(KP900968867), Ty, T3);
	  TA = VFMA(LDK(KP554958132), Tt, Ts);
	  TB = VMUL(LDK(KP974927912), VFMA(LDK(KP801937735), TA, Tu));
	  T1f = VFNMSI(TB, Tz);
	  STM2(&(xo[26]), T1f, ovs, &(xo[2]));
	  T1g = VFMAI(TB, Tz);
	  STM2(&(xo[2]), T1g, ovs, &(xo[2]));
	  STN2(&(xo[0]), T1a, T1g, ovs);
	  TS = VFNMS(LDK(KP692021471), TR, TK);
	  TT = VFNMS(LDK(KP900968867), TS, TH);
	  TX = VFMA(LDK(KP554958132), TW, TV);
	  TY = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), TX, TU));
	  T1h = VFMAI(TY, TT);
	  STM2(&(xo[8]), T1h, ovs, &(xo[0]));
	  STN2(&(xo[8]), T1h, T1b, ovs);
	  T1i = VFNMSI(TY, TT);
	  STM2(&(xo[20]), T1i, ovs, &(xo[0]));
	  T10 = VFNMS(LDK(KP692021471), TZ, TN);
	  T11 = VFNMS(LDK(KP900968867), T10, TH);
	  T12 = VFMA(LDK(KP554958132), TV, TU);
	  T13 = VMUL(LDK(KP974927912), VFMA(LDK(KP801937735), T12, TW));
	  T1j = VFMAI(T13, T11);
	  STM2(&(xo[4]), T1j, ovs, &(xo[0]));
	  T1k = VFNMSI(T13, T11);
	  STM2(&(xo[24]), T1k, ovs, &(xo[0]));
	  STN2(&(xo[24]), T1k, T1f, ovs);
	  TD = VFNMS(LDK(KP692021471), TC, Ta);
	  TE = VFNMS(LDK(KP900968867), TD, T3);
	  TF = VFNMS(LDK(KP554958132), Ts, Tu);
	  TG = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), TF, Tt));
	  T1l = VFNMSI(TG, TE);
	  STM2(&(xo[22]), T1l, ovs, &(xo[2]));
	  STN2(&(xo[20]), T1i, T1l, ovs);
	  T1m = VFMAI(TG, TE);
	  STM2(&(xo[6]), T1m, ovs, &(xo[2]));
	  STN2(&(xo[4]), T1j, T1m, ovs);
     }
}
