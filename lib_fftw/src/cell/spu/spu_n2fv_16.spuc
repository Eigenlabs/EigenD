/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -store-multiple 2 -n 16 -name X(spu_n2fv_16) */

/*
 * This function contains 72 FP additions, 34 FP multiplications,
 * (or, 38 additions, 0 multiplications, 34 fused multiply/add),
 * 94 stack variables, 3 constants, and 40 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_16) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
     DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
     DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V TH, TU, Tz, T7, TA, Tu, TV, TK, TC, Te, TX, TO, TD, Tl, TY;
	  V TR, T3, T6, T1, T2, T4, T5, TJ, Tq, TI, Tt, To, Tp, Tr, Ts;
	  V TM, Ta, TN, Td, T8, T9, Tb, Tc, TP, Th, TQ, Tk, Tf, Tg, Ti;
	  V Tj, T1b, T1c, T1d, T1e, TF, TG, TB, TE, T1f, T1g, T1h, T1i, Tn, Tx;
	  V Ty, Tw, Tv, Tm, T13, T17, T16, T14, T11, TT, T12, T10, TL, TS, TW;
	  V TZ, T1j, T1k, T1l, T1m, T19, T15, T1a, T18, T1n, T1o, T1p, T1q;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 8)]), ivs, &(xi[0]));
	  TH = VSUB(T1, T2);
	  T3 = VADD(T1, T2);
	  T4 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  T5 = LD(&(xi[WS(is, 12)]), ivs, &(xi[0]));
	  T6 = VADD(T4, T5);
	  TU = VSUB(T4, T5);
	  Tz = VADD(T3, T6);
	  T7 = VSUB(T3, T6);
	  To = LD(&(xi[WS(is, 14)]), ivs, &(xi[0]));
	  Tp = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  TJ = VSUB(To, Tp);
	  Tq = VADD(To, Tp);
	  Tr = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  Ts = LD(&(xi[WS(is, 10)]), ivs, &(xi[0]));
	  TI = VSUB(Tr, Ts);
	  Tt = VADD(Tr, Ts);
	  TA = VADD(Tt, Tq);
	  Tu = VSUB(Tq, Tt);
	  TV = VSUB(TJ, TI);
	  TK = VADD(TI, TJ);
	  T8 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  T9 = LD(&(xi[WS(is, 9)]), ivs, &(xi[WS(is, 1)]));
	  TM = VSUB(T8, T9);
	  Ta = VADD(T8, T9);
	  Tb = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  Tc = LD(&(xi[WS(is, 13)]), ivs, &(xi[WS(is, 1)]));
	  TN = VSUB(Tb, Tc);
	  Td = VADD(Tb, Tc);
	  TC = VADD(Ta, Td);
	  Te = VSUB(Ta, Td);
	  TX = VFMA(LDK(KP414213562), TM, TN);
	  TO = VFNMS(LDK(KP414213562), TN, TM);
	  Tf = LD(&(xi[WS(is, 15)]), ivs, &(xi[WS(is, 1)]));
	  Tg = LD(&(xi[WS(is, 7)]), ivs, &(xi[WS(is, 1)]));
	  TP = VSUB(Tf, Tg);
	  Th = VADD(Tf, Tg);
	  Ti = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  Tj = LD(&(xi[WS(is, 11)]), ivs, &(xi[WS(is, 1)]));
	  TQ = VSUB(Tj, Ti);
	  Tk = VADD(Ti, Tj);
	  TD = VADD(Th, Tk);
	  Tl = VSUB(Th, Tk);
	  TY = VFMA(LDK(KP414213562), TP, TQ);
	  TR = VFNMS(LDK(KP414213562), TQ, TP);
	  TF = VSUB(Tz, TA);
	  TB = VADD(Tz, TA);
	  TE = VADD(TC, TD);
	  TG = VSUB(TD, TC);
	  T1b = VSUB(TB, TE);
	  STM2(&(xo[16]), T1b, ovs, &(xo[0]));
	  T1c = VADD(TB, TE);
	  STM2(&(xo[0]), T1c, ovs, &(xo[0]));
	  T1d = VFNMSI(TG, TF);
	  STM2(&(xo[24]), T1d, ovs, &(xo[0]));
	  T1e = VFMAI(TG, TF);
	  STM2(&(xo[8]), T1e, ovs, &(xo[0]));
	  Tv = VSUB(Tl, Te);
	  Tm = VADD(Te, Tl);
	  Tn = VFNMS(LDK(KP707106781), Tm, T7);
	  Tx = VFMA(LDK(KP707106781), Tm, T7);
	  Ty = VFMA(LDK(KP707106781), Tv, Tu);
	  Tw = VFNMS(LDK(KP707106781), Tv, Tu);
	  T1f = VFNMSI(Tw, Tn);
	  STM2(&(xo[12]), T1f, ovs, &(xo[0]));
	  T1g = VFMAI(Ty, Tx);
	  STM2(&(xo[4]), T1g, ovs, &(xo[0]));
	  T1h = VFMAI(Tw, Tn);
	  STM2(&(xo[20]), T1h, ovs, &(xo[0]));
	  T1i = VFNMSI(Ty, Tx);
	  STM2(&(xo[28]), T1i, ovs, &(xo[0]));
	  T13 = VFNMS(LDK(KP707106781), TK, TH);
	  TL = VFMA(LDK(KP707106781), TK, TH);
	  TS = VADD(TO, TR);
	  T17 = VSUB(TR, TO);
	  T11 = VFMA(LDK(KP923879532), TS, TL);
	  TT = VFNMS(LDK(KP923879532), TS, TL);
	  T16 = VFMA(LDK(KP707106781), TV, TU);
	  TW = VFNMS(LDK(KP707106781), TV, TU);
	  TZ = VSUB(TX, TY);
	  T14 = VADD(TX, TY);
	  T12 = VFMA(LDK(KP923879532), TZ, TW);
	  T10 = VFNMS(LDK(KP923879532), TZ, TW);
	  T1j = VFNMSI(T10, TT);
	  STM2(&(xo[18]), T1j, ovs, &(xo[2]));
	  STN2(&(xo[16]), T1b, T1j, ovs);
	  T1k = VFMAI(T12, T11);
	  STM2(&(xo[30]), T1k, ovs, &(xo[2]));
	  STN2(&(xo[28]), T1i, T1k, ovs);
	  T1l = VFMAI(T10, TT);
	  STM2(&(xo[14]), T1l, ovs, &(xo[2]));
	  STN2(&(xo[12]), T1f, T1l, ovs);
	  T1m = VFNMSI(T12, T11);
	  STM2(&(xo[2]), T1m, ovs, &(xo[2]));
	  STN2(&(xo[0]), T1c, T1m, ovs);
	  T19 = VFMA(LDK(KP923879532), T14, T13);
	  T15 = VFNMS(LDK(KP923879532), T14, T13);
	  T1a = VFMA(LDK(KP923879532), T17, T16);
	  T18 = VFNMS(LDK(KP923879532), T17, T16);
	  T1n = VFNMSI(T18, T15);
	  STM2(&(xo[10]), T1n, ovs, &(xo[2]));
	  STN2(&(xo[8]), T1e, T1n, ovs);
	  T1o = VFNMSI(T1a, T19);
	  STM2(&(xo[26]), T1o, ovs, &(xo[2]));
	  STN2(&(xo[24]), T1d, T1o, ovs);
	  T1p = VFMAI(T18, T15);
	  STM2(&(xo[22]), T1p, ovs, &(xo[2]));
	  STN2(&(xo[20]), T1h, T1p, ovs);
	  T1q = VFMAI(T1a, T19);
	  STM2(&(xo[6]), T1q, ovs, &(xo[2]));
	  STN2(&(xo[4]), T1g, T1q, ovs);
     }
}
