/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_twiddle_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -include fftw-spu.h -trivial-stores -n 6 -name X(spu_t1fv_6) */

/*
 * This function contains 23 FP additions, 18 FP multiplications,
 * (or, 17 additions, 12 multiplications, 6 fused multiply/add),
 * 33 stack variables, 2 constants, and 12 memory accesses
 */
#include "fftw-spu.h"

void X(spu_t1fv_6) (R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms) {
     DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
     DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
     INT m;
     R *x;
     x = ri;
     for (m = mb, W = W + (mb * ((TWVL / VL) * 10)); m < me; m = m + VL, x = x + (VL * ms), W = W + (TWVL * 10), MAKE_VOLATILE_STRIDE(rs)) {
	  V T4, Tl, Tf, Ti, Tr, To, T1, T3, T2, T6, Td, T8, Tb, T5, Tc;
	  V T7, Ta, Tm, Tn, T9, Te, Th, Tq, Tg, Tp, Tj, Tk, Ts, Tt;
	  T1 = LD(&(x[0]), ms, &(x[0]));
	  T2 = LD(&(x[WS(rs, 3)]), ms, &(x[WS(rs, 1)]));
	  T3 = BYTWJ(&(W[TWVL * 4]), T2);
	  T4 = VSUB(T1, T3);
	  Tl = VADD(T1, T3);
	  T5 = LD(&(x[WS(rs, 2)]), ms, &(x[0]));
	  T6 = BYTWJ(&(W[TWVL * 2]), T5);
	  Tc = LD(&(x[WS(rs, 1)]), ms, &(x[WS(rs, 1)]));
	  Td = BYTWJ(&(W[0]), Tc);
	  T7 = LD(&(x[WS(rs, 5)]), ms, &(x[WS(rs, 1)]));
	  T8 = BYTWJ(&(W[TWVL * 8]), T7);
	  Ta = LD(&(x[WS(rs, 4)]), ms, &(x[0]));
	  Tb = BYTWJ(&(W[TWVL * 6]), Ta);
	  T9 = VSUB(T6, T8);
	  Tm = VADD(T6, T8);
	  Tn = VADD(Tb, Td);
	  Te = VSUB(Tb, Td);
	  Tf = VADD(T9, Te);
	  Ti = VMUL(LDK(KP866025403), VSUB(Te, T9));
	  Tr = VMUL(LDK(KP866025403), VSUB(Tn, Tm));
	  To = VADD(Tm, Tn);
	  Tg = VADD(T4, Tf);
	  Th = VFNMS(LDK(KP500000000), Tf, T4);
	  ST(&(x[WS(rs, 3)]), Tg, ms, &(x[WS(rs, 1)]));
	  Tp = VADD(Tl, To);
	  Tq = VFNMS(LDK(KP500000000), To, Tl);
	  ST(&(x[0]), Tp, ms, &(x[0]));
	  Tj = VFNMSI(Ti, Th);
	  Tk = VFMAI(Ti, Th);
	  ST(&(x[WS(rs, 5)]), Tj, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 1)]), Tk, ms, &(x[WS(rs, 1)]));
	  Ts = VFNMSI(Tr, Tq);
	  Tt = VFMAI(Tr, Tq);
	  ST(&(x[WS(rs, 2)]), Ts, ms, &(x[0]));
	  ST(&(x[WS(rs, 4)]), Tt, ms, &(x[0]));
     }
}
