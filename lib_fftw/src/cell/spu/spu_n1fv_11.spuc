/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -n 11 -name X(spu_n2fv_11) */

/*
 * This function contains 70 FP additions, 60 FP multiplications,
 * (or, 15 additions, 5 multiplications, 55 fused multiply/add),
 * 80 stack variables, 11 constants, and 22 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_11) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP959492973, +0.959492973614497389890368057066327699062454848);
     DVK(KP918985947, +0.918985947228994779780736114132655398124909697);
     DVK(KP989821441, +0.989821441880932732376092037776718787376519372);
     DVK(KP830830026, +0.830830026003772851058548298459246407048009821);
     DVK(KP876768831, +0.876768831002589333891339807079336796764054852);
     DVK(KP778434453, +0.778434453334651800608337670740821884709317477);
     DVK(KP372785597, +0.372785597771792209609773152906148328659002598);
     DVK(KP715370323, +0.715370323453429719112414662767260662417897278);
     DVK(KP521108558, +0.521108558113202722944698153526659300680427422);
     DVK(KP634356270, +0.634356270682424498893150776899916060542806975);
     DVK(KP342584725, +0.342584725681637509502641509861112333758894680);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V T1, T4, Tp, Tg, Tq, T7, Tn, Ta, Tm, Td, To, Ti, Tw, T12, Ts;
	  V TX, TT, TK, TB, TO, TF, T2, T3, Te, Tf, T5, T6, T8, T9, Tb;
	  V Tc, Th, Tv, T11, Tr, TW, TS, TJ, TA, TN, TE, Tk, Tu, Tj, Tt;
	  V Tl, TZ, T14, TY, T13, T10, TQ, TV, TP, TU, TR, TH, TM, TG, TL;
	  V TI, Ty, TD, Tx, TC, Tz;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  T3 = LD(&(xi[WS(is, 10)]), ivs, &(xi[0]));
	  T4 = VADD(T2, T3);
	  Tp = VSUB(T3, T2);
	  Te = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  Tf = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  Tg = VADD(Te, Tf);
	  Tq = VSUB(Tf, Te);
	  T5 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T6 = LD(&(xi[WS(is, 9)]), ivs, &(xi[WS(is, 1)]));
	  T7 = VADD(T5, T6);
	  Tn = VSUB(T6, T5);
	  T8 = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  T9 = LD(&(xi[WS(is, 8)]), ivs, &(xi[0]));
	  Ta = VADD(T8, T9);
	  Tm = VSUB(T9, T8);
	  Tb = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  Tc = LD(&(xi[WS(is, 7)]), ivs, &(xi[WS(is, 1)]));
	  Td = VADD(Tb, Tc);
	  To = VSUB(Tc, Tb);
	  Th = VFNMS(LDK(KP342584725), Ta, T7);
	  Ti = VFNMS(LDK(KP634356270), Th, Td);
	  Tv = VFNMS(LDK(KP342584725), Td, T4);
	  Tw = VFNMS(LDK(KP634356270), Tv, T7);
	  T11 = VFNMS(LDK(KP521108558), Tp, Tn);
	  T12 = VFNMS(LDK(KP715370323), T11, Tm);
	  Tr = VFMA(LDK(KP521108558), Tq, Tp);
	  Ts = VFMA(LDK(KP715370323), Tr, To);
	  TW = VFNMS(LDK(KP342584725), Tg, Td);
	  TX = VFNMS(LDK(KP634356270), TW, Ta);
	  TS = VFMA(LDK(KP715370323), Tm, Tp);
	  TT = VFMA(LDK(KP372785597), To, TS);
	  TJ = VFNMS(LDK(KP521108558), Tn, To);
	  TK = VFMA(LDK(KP715370323), TJ, Tq);
	  TA = VFMA(LDK(KP521108558), Tm, Tq);
	  TB = VFNMS(LDK(KP715370323), TA, Tn);
	  TN = VFNMS(LDK(KP342584725), T7, Tg);
	  TO = VFNMS(LDK(KP634356270), TN, T4);
	  TE = VFNMS(LDK(KP342584725), T4, Ta);
	  TF = VFNMS(LDK(KP634356270), TE, Tg);
	  ST(&(xo[0]), VADD(T1, VADD(T4, VADD(T7, VADD(Ta, VADD(Td, Tg))))), ovs, &(xo[0]));
	  Tj = VFNMS(LDK(KP778434453), Ti, T4);
	  Tk = VFNMS(LDK(KP876768831), Tj, Tg);
	  Tt = VFMA(LDK(KP830830026), Ts, Tn);
	  Tu = VMUL(LDK(KP989821441), VFMA(LDK(KP918985947), Tt, Tm));
	  Tl = VFNMS(LDK(KP959492973), Tk, T1);
	  ST(&(xo[20]), VFNMSI(Tu, Tl), ovs, &(xo[0]));
	  ST(&(xo[2]), VFMAI(Tu, Tl), ovs, &(xo[2]));
	  TY = VFNMS(LDK(KP778434453), TX, T7);
	  TZ = VFNMS(LDK(KP876768831), TY, T4);
	  T13 = VFNMS(LDK(KP830830026), T12, To);
	  T14 = VMUL(LDK(KP989821441), VFNMS(LDK(KP918985947), T13, Tq));
	  T10 = VFNMS(LDK(KP959492973), TZ, T1);
	  ST(&(xo[12]), VFNMSI(T14, T10), ovs, &(xo[0]));
	  ST(&(xo[10]), VFMAI(T14, T10), ovs, &(xo[2]));
	  TP = VFNMS(LDK(KP778434453), TO, Ta);
	  TQ = VFNMS(LDK(KP876768831), TP, Td);
	  TU = VFNMS(LDK(KP830830026), TT, Tq);
	  TV = VMUL(LDK(KP989821441), VFMA(LDK(KP918985947), TU, Tn));
	  TR = VFNMS(LDK(KP959492973), TQ, T1);
	  ST(&(xo[8]), VFNMSI(TV, TR), ovs, &(xo[0]));
	  ST(&(xo[14]), VFMAI(TV, TR), ovs, &(xo[2]));
	  TG = VFNMS(LDK(KP778434453), TF, Td);
	  TH = VFNMS(LDK(KP876768831), TG, T7);
	  TL = VFNMS(LDK(KP830830026), TK, Tm);
	  TM = VMUL(LDK(KP989821441), VFNMS(LDK(KP918985947), TL, Tp));
	  TI = VFNMS(LDK(KP959492973), TH, T1);
	  ST(&(xo[16]), VFNMSI(TM, TI), ovs, &(xo[0]));
	  ST(&(xo[6]), VFMAI(TM, TI), ovs, &(xo[2]));
	  Tx = VFNMS(LDK(KP778434453), Tw, Tg);
	  Ty = VFNMS(LDK(KP876768831), Tx, Ta);
	  TC = VFMA(LDK(KP830830026), TB, Tp);
	  TD = VMUL(LDK(KP989821441), VFNMS(LDK(KP918985947), TC, To));
	  Tz = VFNMS(LDK(KP959492973), Ty, T1);
	  ST(&(xo[4]), VFNMSI(TD, Tz), ovs, &(xo[0]));
	  ST(&(xo[18]), VFMAI(TD, Tz), ovs, &(xo[2]));
     }
}
