/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -store-multiple 2 -n 6 -name X(spu_n2fv_6) */

/*
 * This function contains 18 FP additions, 8 FP multiplications,
 * (or, 12 additions, 2 multiplications, 6 fused multiply/add),
 * 29 stack variables, 2 constants, and 15 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_6) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
     DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V Td, T3, Tc, Ta, Tg, Ti, T1, T2, Te, T6, Tf, T9, T4, T5, T7;
	  V T8, Tj, Tk, Tl, Tb, Tm, Th, Tn, To;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  Td = VADD(T1, T2);
	  T3 = VSUB(T1, T2);
	  T4 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T5 = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  Te = VADD(T4, T5);
	  T6 = VSUB(T4, T5);
	  T7 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  T8 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  Tf = VADD(T7, T8);
	  T9 = VSUB(T7, T8);
	  Tc = VMUL(LDK(KP866025403), VSUB(T9, T6));
	  Ta = VADD(T6, T9);
	  Tg = VADD(Te, Tf);
	  Ti = VMUL(LDK(KP866025403), VSUB(Tf, Te));
	  Tj = VADD(T3, Ta);
	  STM2(&(xo[6]), Tj, ovs, &(xo[2]));
	  Tk = VADD(Td, Tg);
	  STM2(&(xo[0]), Tk, ovs, &(xo[0]));
	  Tb = VFNMS(LDK(KP500000000), Ta, T3);
	  Tl = VFNMSI(Tc, Tb);
	  STM2(&(xo[10]), Tl, ovs, &(xo[2]));
	  Tm = VFMAI(Tc, Tb);
	  STM2(&(xo[2]), Tm, ovs, &(xo[2]));
	  STN2(&(xo[0]), Tk, Tm, ovs);
	  Th = VFNMS(LDK(KP500000000), Tg, Td);
	  Tn = VFNMSI(Ti, Th);
	  STM2(&(xo[4]), Tn, ovs, &(xo[0]));
	  STN2(&(xo[4]), Tn, Tj, ovs);
	  To = VFMAI(Ti, Th);
	  STM2(&(xo[8]), To, ovs, &(xo[0]));
	  STN2(&(xo[8]), To, Tl, ovs);
     }
}
