/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -n 5 -name X(spu_n2fv_5) */

/*
 * This function contains 16 FP additions, 11 FP multiplications,
 * (or, 7 additions, 2 multiplications, 9 fused multiply/add),
 * 23 stack variables, 4 constants, and 10 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_5) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
     DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
     DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
     DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V T1, Tc, Td, T8, Ta, T4, T7, T2, T3, T5, T6, Tg, Te, Tb, Tf;
	  V T9;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  T3 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  T4 = VADD(T2, T3);
	  Tc = VSUB(T2, T3);
	  T5 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T6 = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  Td = VSUB(T5, T6);
	  T7 = VADD(T5, T6);
	  T8 = VADD(T4, T7);
	  Ta = VSUB(T4, T7);
	  ST(&(xo[0]), VADD(T1, T8), ovs, &(xo[0]));
	  Tg = VMUL(LDK(KP951056516), VFNMS(LDK(KP618033988), Tc, Td));
	  Te = VMUL(LDK(KP951056516), VFMA(LDK(KP618033988), Td, Tc));
	  T9 = VFNMS(LDK(KP250000000), T8, T1);
	  Tb = VFMA(LDK(KP559016994), Ta, T9);
	  Tf = VFNMS(LDK(KP559016994), Ta, T9);
	  ST(&(xo[2]), VFNMSI(Te, Tb), ovs, &(xo[2]));
	  ST(&(xo[6]), VFNMSI(Tg, Tf), ovs, &(xo[2]));
	  ST(&(xo[8]), VFMAI(Te, Tb), ovs, &(xo[0]));
	  ST(&(xo[4]), VFMAI(Tg, Tf), ovs, &(xo[0]));
     }
}
