/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -n 7 -name X(spu_n2fv_7) */

/*
 * This function contains 30 FP additions, 24 FP multiplications,
 * (or, 9 additions, 3 multiplications, 21 fused multiply/add),
 * 37 stack variables, 6 constants, and 14 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_7) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
     DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
     DVK(KP801937735, +0.801937735804838252472204639014890102331838324);
     DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
     DVK(KP554958132, +0.554958132087371191422194871006410481067288862);
     DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V T1, T4, Te, Ta, Tf, T7, Tg, Tb, Th, Tr, To, Tm, Tj, T2, T3;
	  V T8, T9, T5, T6, Ts, Tq, Tp, Ti, Td, Tc, Tn, Tl, Tk;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  T3 = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  T4 = VADD(T2, T3);
	  Te = VSUB(T3, T2);
	  T8 = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  T9 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  Ta = VADD(T8, T9);
	  Tf = VSUB(T9, T8);
	  T5 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  T6 = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  T7 = VADD(T5, T6);
	  Tg = VSUB(T6, T5);
	  Tb = VFNMS(LDK(KP356895867), T4, Ta);
	  Th = VFMA(LDK(KP554958132), Tg, Tf);
	  Tr = VFNMS(LDK(KP554958132), Te, Tg);
	  To = VFNMS(LDK(KP356895867), Ta, T7);
	  Tm = VFMA(LDK(KP554958132), Tf, Te);
	  Tj = VFNMS(LDK(KP356895867), T7, T4);
	  ST(&(xo[0]), VADD(T1, VADD(T4, VADD(T7, Ta))), ovs, &(xo[0]));
	  Ts = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), Tr, Tf));
	  Tp = VFNMS(LDK(KP692021471), To, T4);
	  Tq = VFNMS(LDK(KP900968867), Tp, T1);
	  ST(&(xo[8]), VFNMSI(Ts, Tq), ovs, &(xo[0]));
	  ST(&(xo[6]), VFMAI(Ts, Tq), ovs, &(xo[2]));
	  Ti = VMUL(LDK(KP974927912), VFNMS(LDK(KP801937735), Th, Te));
	  Tc = VFNMS(LDK(KP692021471), Tb, T7);
	  Td = VFNMS(LDK(KP900968867), Tc, T1);
	  ST(&(xo[10]), VFNMSI(Ti, Td), ovs, &(xo[2]));
	  ST(&(xo[4]), VFMAI(Ti, Td), ovs, &(xo[0]));
	  Tn = VMUL(LDK(KP974927912), VFMA(LDK(KP801937735), Tm, Tg));
	  Tk = VFNMS(LDK(KP692021471), Tj, Ta);
	  Tl = VFNMS(LDK(KP900968867), Tk, T1);
	  ST(&(xo[12]), VFNMSI(Tn, Tl), ovs, &(xo[0]));
	  ST(&(xo[2]), VFMAI(Tn, Tl), ovs, &(xo[2]));
     }
}
