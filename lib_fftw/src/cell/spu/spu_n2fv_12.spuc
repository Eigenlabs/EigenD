/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/* Generated by: ../../genfft/gen_notw_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -with-ostride 2 -include fftw-spu.h -store-multiple 2 -n 12 -name X(spu_n2fv_12) */

/*
 * This function contains 48 FP additions, 20 FP multiplications,
 * (or, 30 additions, 2 multiplications, 18 fused multiply/add),
 * 65 stack variables, 2 constants, and 30 memory accesses
 */
#include "fftw-spu.h"

void X(spu_n2fv_12) (const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs) {
     DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
     DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
     INT i;
     const R *xi;
     R *xo;
     xi = ri;
     xo = ro;
     for (i = v; i > 0; i = i - VL, xi = xi + (VL * ivs), xo = xo + (VL * ovs), MAKE_VOLATILE_STRIDE(is), MAKE_VOLATILE_STRIDE(os)) {
	  V TF, T5, Ta, TG, Tt, TB, TA, Ti, Tm, TI, Tp, TJ, T1, T6, Tr;
	  V T4, Ts, T9, T2, T3, T7, T8, Tk, Tn, Tl, Te, To, Th, Tc, Td;
	  V Tf, Tg, TN, TO, TP, TQ, TL, TM, TH, TK, Tx, Ty, TT, TU, Tj;
	  V Tv, Tw, Tu, Tb, Tq, TR, TS, TE, TC, TD, Tz, TV, TW, TX, TY;
	  T1 = LD(&(xi[0]), ivs, &(xi[0]));
	  T6 = LD(&(xi[WS(is, 6)]), ivs, &(xi[0]));
	  T2 = LD(&(xi[WS(is, 4)]), ivs, &(xi[0]));
	  T3 = LD(&(xi[WS(is, 8)]), ivs, &(xi[0]));
	  Tr = VSUB(T3, T2);
	  T4 = VADD(T2, T3);
	  T7 = LD(&(xi[WS(is, 10)]), ivs, &(xi[0]));
	  T8 = LD(&(xi[WS(is, 2)]), ivs, &(xi[0]));
	  Ts = VSUB(T8, T7);
	  T9 = VADD(T7, T8);
	  TF = VADD(T1, T4);
	  T5 = VFNMS(LDK(KP500000000), T4, T1);
	  Ta = VFNMS(LDK(KP500000000), T9, T6);
	  TG = VADD(T6, T9);
	  Tt = VSUB(Tr, Ts);
	  TB = VADD(Tr, Ts);
	  Tk = LD(&(xi[WS(is, 3)]), ivs, &(xi[WS(is, 1)]));
	  Tn = LD(&(xi[WS(is, 9)]), ivs, &(xi[WS(is, 1)]));
	  Tc = LD(&(xi[WS(is, 11)]), ivs, &(xi[WS(is, 1)]));
	  Td = LD(&(xi[WS(is, 7)]), ivs, &(xi[WS(is, 1)]));
	  Tl = VADD(Td, Tc);
	  Te = VSUB(Tc, Td);
	  Tf = LD(&(xi[WS(is, 1)]), ivs, &(xi[WS(is, 1)]));
	  Tg = LD(&(xi[WS(is, 5)]), ivs, &(xi[WS(is, 1)]));
	  To = VADD(Tf, Tg);
	  Th = VSUB(Tf, Tg);
	  TA = VSUB(Te, Th);
	  Ti = VADD(Te, Th);
	  Tm = VFNMS(LDK(KP500000000), Tl, Tk);
	  TI = VADD(Tk, Tl);
	  Tp = VFNMS(LDK(KP500000000), To, Tn);
	  TJ = VADD(Tn, To);
	  TL = VADD(TF, TG);
	  TH = VSUB(TF, TG);
	  TK = VSUB(TI, TJ);
	  TM = VADD(TI, TJ);
	  TN = VFNMSI(TK, TH);
	  STM2(&(xo[18]), TN, ovs, &(xo[2]));
	  TO = VFMAI(TK, TH);
	  STM2(&(xo[6]), TO, ovs, &(xo[2]));
	  TP = VSUB(TL, TM);
	  STM2(&(xo[12]), TP, ovs, &(xo[0]));
	  TQ = VADD(TL, TM);
	  STM2(&(xo[0]), TQ, ovs, &(xo[0]));
	  Tx = VADD(T5, Ta);
	  Tb = VSUB(T5, Ta);
	  Tj = VFMA(LDK(KP866025403), Ti, Tb);
	  Tv = VFNMS(LDK(KP866025403), Ti, Tb);
	  Tq = VSUB(Tm, Tp);
	  Ty = VADD(Tm, Tp);
	  Tw = VFMA(LDK(KP866025403), Tt, Tq);
	  Tu = VFNMS(LDK(KP866025403), Tt, Tq);
	  TR = VFNMSI(Tu, Tj);
	  STM2(&(xo[2]), TR, ovs, &(xo[2]));
	  STN2(&(xo[0]), TQ, TR, ovs);
	  TS = VFMAI(Tw, Tv);
	  STM2(&(xo[14]), TS, ovs, &(xo[2]));
	  STN2(&(xo[12]), TP, TS, ovs);
	  TT = VFMAI(Tu, Tj);
	  STM2(&(xo[22]), TT, ovs, &(xo[2]));
	  TU = VFNMSI(Tw, Tv);
	  STM2(&(xo[10]), TU, ovs, &(xo[2]));
	  TE = VMUL(LDK(KP866025403), VADD(TB, TA));
	  TC = VMUL(LDK(KP866025403), VSUB(TA, TB));
	  TD = VADD(Tx, Ty);
	  Tz = VSUB(Tx, Ty);
	  TV = VFMAI(TC, Tz);
	  STM2(&(xo[4]), TV, ovs, &(xo[0]));
	  STN2(&(xo[4]), TV, TO, ovs);
	  TW = VFNMSI(TE, TD);
	  STM2(&(xo[16]), TW, ovs, &(xo[0]));
	  STN2(&(xo[16]), TW, TN, ovs);
	  TX = VFNMSI(TC, Tz);
	  STM2(&(xo[20]), TX, ovs, &(xo[0]));
	  STN2(&(xo[20]), TX, TT, ovs);
	  TY = VFMAI(TE, TD);
	  STM2(&(xo[8]), TY, ovs, &(xo[0]));
	  STN2(&(xo[8]), TY, TU, ovs);
     }
}
